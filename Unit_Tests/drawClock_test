#include <Arduino.h>
#include <LiquidCrystal_I2C.h>

// Assuming the I2C address of your display is 0x27, and it's a 20x4 character display
LiquidCrystal_I2C LCD_DISP(0x27, 20, 4);

void drawDig(byte dig, byte x, byte y) {
  switch (dig) {
    case 0:
      LCD_DISP.setCursor(x, y); // set cursor to column 0, line 0 (first row)
      LCD_DISP.write(0);  // call each segment to create
      LCD_DISP.write(1);  // top half of the number
      LCD_DISP.write(2);
      LCD_DISP.setCursor(x, y + 1); // set cursor to colum 0, line 1 (second row)
      LCD_DISP.write(3);  // call each segment to create
      LCD_DISP.write(4);  // bottom half of the number
      LCD_DISP.write(5);
      break;
    case 1:
      LCD_DISP.setCursor(x + 1, y);
      LCD_DISP.write(1);
      LCD_DISP.write(2);
      LCD_DISP.setCursor(x + 2, y + 1);
      LCD_DISP.write(5);
      break;
    case 2:
      LCD_DISP.setCursor(x, y);
      LCD_DISP.write(6);
      LCD_DISP.write(6);
      LCD_DISP.write(2);
      LCD_DISP.setCursor(x, y + 1);
      LCD_DISP.write(3);
      LCD_DISP.write(7);
      LCD_DISP.write(7);
      break;
    case 3:
      LCD_DISP.setCursor(x, y);
      LCD_DISP.write(6);
      LCD_DISP.write(6);
      LCD_DISP.write(2);
      LCD_DISP.setCursor(x, y + 1);
      LCD_DISP.write(7);
      LCD_DISP.write(7);
      LCD_DISP.write(5);
      break;
    case 4:
      LCD_DISP.setCursor(x, y);
      LCD_DISP.write(3);
      LCD_DISP.write(4);
      LCD_DISP.write(2);
      LCD_DISP.setCursor(x + 2, y + 1);
      LCD_DISP.write(5);
      break;
    case 5:
      LCD_DISP.setCursor(x, y);
      LCD_DISP.write(0);
      LCD_DISP.write(6);
      LCD_DISP.write(6);
      LCD_DISP.setCursor(x, y + 1);
      LCD_DISP.write(7);
      LCD_DISP.write(7);
      LCD_DISP.write(5);
      break;
    case 6:
      LCD_DISP.setCursor(x, y);
      LCD_DISP.write(0);
      LCD_DISP.write(6);
      LCD_DISP.write(6);
      LCD_DISP.setCursor(x, y + 1);
      LCD_DISP.write(3);
      LCD_DISP.write(7);
      LCD_DISP.write(5);
      break;
    case 7:
      LCD_DISP.setCursor(x, y);
      LCD_DISP.write(1);
      LCD_DISP.write(1);
      LCD_DISP.write(2);
      LCD_DISP.setCursor(x + 1, y + 1);
      LCD_DISP.write(0);
      break;
    case 8:
      LCD_DISP.setCursor(x, y);
      LCD_DISP.write(0);
      LCD_DISP.write(6);
      LCD_DISP.write(2);
      LCD_DISP.setCursor(x, y + 1);
      LCD_DISP.write(3);
      LCD_DISP.write(7);
      LCD_DISP.write(5);
      break;
    case 9:
      LCD_DISP.setCursor(x, y);
      LCD_DISP.write(0);
      LCD_DISP.write(6);
      LCD_DISP.write(2);
      LCD_DISP.setCursor(x + 1, y + 1);
      LCD_DISP.write(4);
      LCD_DISP.write(5);
      break;
    case 10:
      LCD_DISP.setCursor(x, y);
      LCD_DISP.write(32);
      LCD_DISP.write(32);
      LCD_DISP.write(32);
      LCD_DISP.setCursor(x, y + 1);
      LCD_DISP.write(32);
      LCD_DISP.write(32);
      LCD_DISP.write(32);
      break;
  }
}

void drawdots(byte x, byte y, boolean state) {
  byte code;
  if (state) code = 165;
  else code = 32;
  LCD_DISP.setCursor(x, y);
  LCD_DISP.write(code);
  LCD_DISP.setCursor(x, y + 1);
  LCD_DISP.write(code);
}

void drawClock(byte hours, byte minutes, byte x, byte y, boolean dotState) {
  LCD_DISP.setCursor(x, y);
  LCD_DISP.print("               ");
  LCD_DISP.setCursor(x, y + 1);
  LCD_DISP.print("               ");

  if (hours / 10 == 0) drawDig(10, x, y);
  else drawDig(hours / 10, x, y);
  drawDig(hours % 10, x + 4, y);
  drawDig(minutes / 10, x + 8, y);
  drawDig(minutes % 10, x + 12, y);
}

void setup() {
  Serial.begin(9600);
  LCD_DISP.init();
  LCD_DISP.backlight();
  
  Serial.println("Enter time in the format 'hh,mm' (without quotes), where:");
  Serial.println("  hh is hours (0-23),");
  Serial.println("  mm is minutes (0-59).");
}

void loop() {
  if (Serial.available() > 0) {
    String input = Serial.readStringUntil('\n');
    byte hours = input.substring(0, input.indexOf(',')).toInt();
    byte minutes = input.substring(input.indexOf(',') + 1).toInt();

    // Clear the display and draw the clock
    LCD_DISP.clear();
    drawClock(hours, minutes, 0, 0, true);
  }
}
